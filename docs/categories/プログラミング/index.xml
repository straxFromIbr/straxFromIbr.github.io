<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>プログラミング on メモおきば</title>
    <link>https://straxfromibr.github.io/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</link>
    <description>Recent content in プログラミング on メモおきば</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 22 Jul 2021 14:54:35 +0900</lastBuildDate><atom:link href="https://straxfromibr.github.io/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>fishシェルの設定ファイル管理</title>
      <link>https://straxfromibr.github.io/2021/07/fish-config/</link>
      <pubDate>Thu, 22 Jul 2021 14:54:35 +0900</pubDate>
      
      <guid>https://straxfromibr.github.io/2021/07/fish-config/</guid>
      <description>fishシェルの設定ファイル管理</description>
    </item>
    
    <item>
      <title>fishのプロンプトにCondaの環境名を表示しないようにする</title>
      <link>https://straxfromibr.github.io/2021/07/tide-erase-condaname/</link>
      <pubDate>Wed, 21 Jul 2021 18:02:22 +0900</pubDate>
      
      <guid>https://straxfromibr.github.io/2021/07/tide-erase-condaname/</guid>
      <description>&lt;p&gt;fishのオシャレなプロンプトフレームワークである&lt;a href=&#34;https://github.com/IlanCosman/tide&#34;&gt;llanCosman/tide&lt;/a&gt;でMiniForge&lt;a href=&#34;https://straxfromibr.github.io/2021/06/fish_tide/&#34;&gt;コンダ環境の名前をプロンプトに表示&lt;/a&gt;するようにした&amp;hellip; のだがデフォルトの表示も残ってしまいイマイチダサいプロンプトになってたので修正。&lt;/p&gt;
&lt;p&gt;手っ取り早く適用したい人は&lt;a href=&#34;https://github.com/jorgebucaran/fisher&#34;&gt;jorgebucaran/fisher: A plugin manager for Fish.&lt;/a&gt;をインストールしたあと次のコマンドを実行。&lt;/p&gt;
&lt;p&gt;結構手軽にプラグインが作成できてびっくりした。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fisher install straxFromIbr/invisible-conda-name
&lt;/code&gt;&lt;/pre&gt;
 
  
  
  
  
    
      
    
  
    
  
    
      
    
  
    
      
    
  

 
  
  
  
  
    
  
    
      
    
  
    
      
    
  

&lt;div class=&#34;figure fig-100 center&#34; &gt;
  
    &lt;a class=&#34;fancybox&#34; href=&#34;https://straxfromibr.github.io/images/tide-erase-condaname/prompt.jpg&#34; title=&#34;プロンプト&#34; data-fancybox-group=&#34;&#34;&gt;
  
    &lt;img class=&#34;fig-img&#34; src=&#34;https://straxfromibr.github.io/images/tide-erase-condaname/prompt.jpg&#34;  alt=&#34;プロンプト&#34;&gt;
  
    &lt;/a&gt;
  
   
    &lt;span class=&#34;caption&#34;&gt;プロンプト&lt;/span&gt;
  
&lt;/div&gt;

  &lt;div style=&#34;clear:both;&#34;&gt;&lt;/div&gt;

&lt;p&gt;変数の一覧から次のようにしてconda環境名を設定してそうな変数を調べると・・・&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; set | grep base | grep -v history
CONDA_DEFAULT_ENV base
CONDA_PROMPT_MODIFIER &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(base) &amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;表示に関わっていそうなのは&lt;code&gt;$CONDA_PROMPT_MODIFIER&lt;/code&gt;であることがわかる。
そのためこの変数を次のコマンドで削除する&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;set -e CONDA_PROMPT_MODIFIER
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;するとプロンプト右下の&lt;code&gt;(base)&lt;/code&gt;という表示が消えるはず。&lt;/p&gt;
&lt;p&gt;このコマンドを毎度打つのも非常に手間なのでfishシェルの機能であるイベントハンドラを用いて解決する。次のような関数を適当な&lt;code&gt;~/.config/fish/*.fish&lt;/code&gt;ファイルに定義する。関数名も適当でいい。&lt;code&gt;_&lt;/code&gt;を先頭につけると&lt;code&gt;functions&lt;/code&gt;コマンドで表示されない不可視関数として定義できる。&lt;/p&gt;
&lt;p&gt;この関数でキモとなるのは&lt;code&gt;-e fish_prompt&lt;/code&gt;オプションである。これは新たなfishプロンプトが表h時される直前に発生するイベント&lt;code&gt;fish_prompt&lt;/code&gt;時に関数を自動的に実行させるためのオプションである。エンターキーを押すたびに変数を削除するわけですね。&lt;/p&gt;
&lt;p&gt;参考:&lt;a href=&#34;https://fishshell.com/docs/current/cmds/function.html?highlight=function&#34;&gt;function - create a function — fish-shell 3.3.1 documentation&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; _clear_condaenvname -e fish_prompt
    set -u CONDA_PROMPT_MODIFIER
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;おしまい&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs Lispのマクロ定義のあの記号はbashでいうアレ</title>
      <link>https://straxfromibr.github.io/2021/07/emacsmacrobash/</link>
      <pubDate>Wed, 21 Jul 2021 16:04:24 +0900</pubDate>
      
      <guid>https://straxfromibr.github.io/2021/07/emacsmacrobash/</guid>
      <description>Emacs Lispのマクロ定義の記号とbashのコマンド展開の(無理のある）対応付け。</description>
    </item>
    
    <item>
      <title>Emacsでvimキーバインディング</title>
      <link>https://straxfromibr.github.io/2021/07/evilinstall/</link>
      <pubDate>Tue, 20 Jul 2021 15:20:15 +0900</pubDate>
      
      <guid>https://straxfromibr.github.io/2021/07/evilinstall/</guid>
      <description>&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GNU Emacs 27.2: Mach-O 64-bit executable arm64
&lt;ul&gt;
&lt;li&gt;Homebrewでインストールしたもの&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;記号処理プログラミングの授業でLisp処理系としてEmacs Lispを使用しているのだけど、viの便利さにすっかり魅了されてしまったがために何か方法はないかと模索。macOSユーザなのにﾅﾝﾃﾞﾀﾞｲ(Macは標準のキーバインドがemacs風)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;EVIL&lt;/a&gt;というプラグインを見つけたのでインストール方法をメモ。&lt;/p&gt;
&lt;p&gt;次のコードを&lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;に追記する。その後emacsを起動し&lt;code&gt;M-x package-install RET evil RET&lt;/code&gt;とコマンドを入力。(&lt;code&gt;M-&lt;/code&gt;はエスケープ(メタキー), &lt;code&gt;RET&lt;/code&gt;はリターン)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs&#34; data-lang=&#34;emacs&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Set up package.el to work with MELPA&lt;/span&gt;
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package&lt;/span&gt;)
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package-archives&lt;/span&gt;
             &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;melpa&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://melpa.org/packages/&amp;#34;&lt;/span&gt;))
(package-initialize)
(package-refresh-contents)

&lt;span style=&#34;color:#75715e&#34;&gt;;; Download Evil&lt;/span&gt;
(unless (package-installed-p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil&lt;/span&gt;)
  (package-install &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;;; Enable Evil&lt;/span&gt;
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil&lt;/span&gt;)
(evil-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;ちなみに現在の&lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;はこんな感じ。ほとんど素のまま&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs&#34; data-lang=&#34;emacs&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Initialize MELPA, a package manager&lt;/span&gt;
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package&lt;/span&gt;)
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package-archives&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;melpa&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://melpa.org/packages/&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(package-initialize)

&lt;span style=&#34;color:#75715e&#34;&gt;;; Set custom vaiables (??) 公式チュートリアルそのまま&lt;/span&gt;
(custom-set-variables
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(package-selected-packages &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(evil)))
(custom-set-faces)

&lt;span style=&#34;color:#75715e&#34;&gt;;;; Enable EVIL-mode&lt;/span&gt;
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil&lt;/span&gt;)
(evil-mode)


&lt;span style=&#34;color:#75715e&#34;&gt;;; Display line numbers&lt;/span&gt;
(if (version&amp;lt;= &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;26.0.50&amp;#34;&lt;/span&gt; emacs-version)
    (progn
      (global-display-line-numbers-mode)
      (set-face-attribute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;line-number-current-line&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
                           :foreground &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gold&amp;#34;&lt;/span&gt;)))
(setq-default indicate-empty-lines &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(setq-default indicate-buffer-boundaries &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;left&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>systemdでGUIアプリケーションを自動実動</title>
      <link>https://straxfromibr.github.io/2021/07/piservice/</link>
      <pubDate>Fri, 02 Jul 2021 20:44:03 +0900</pubDate>
      
      <guid>https://straxfromibr.github.io/2021/07/piservice/</guid>
      <description>systemdによりRasPiを起動した際にスクリプトを自動実行するようにするための概略メモ</description>
    </item>
    
    <item>
      <title>Fish tideのアイテム追加</title>
      <link>https://straxfromibr.github.io/2021/06/fish_tide/</link>
      <pubDate>Tue, 29 Jun 2021 22:56:22 +0900</pubDate>
      
      <guid>https://straxfromibr.github.io/2021/06/fish_tide/</guid>
      <description>Fishシェルのプロンプトプラグインtideの設定について</description>
    </item>
    
    <item>
      <title>Python環境構築 on RasPi</title>
      <link>https://straxfromibr.github.io/2021/06/raspi_pkginstallation/</link>
      <pubDate>Mon, 28 Jun 2021 20:53:20 +0900</pubDate>
      
      <guid>https://straxfromibr.github.io/2021/06/raspi_pkginstallation/</guid>
      <description>RaspberryPi4上にTensorflowなど各種ライブラリをインストールする．</description>
    </item>
    
    <item>
      <title>Fish環境構築</title>
      <link>https://straxfromibr.github.io/2021/06/fishintro/</link>
      <pubDate>Sat, 26 Jun 2021 14:30:20 +0900</pubDate>
      
      <guid>https://straxfromibr.github.io/2021/06/fishintro/</guid>
      <description>fishシェルへの乗り換え案内</description>
    </item>
    
  </channel>
</rss>
